# version: '3'
# services:
#   zookeeper:
#     image: confluentinc/cp-zookeeper:latest
#     environment:
#       ZOOKEEPER_CLIENT_PORT: 2181
#       ZOOKEEPER_TICK_TIME: 2000
#     ports:
#       - "2181:2181"
#   kafka:
#     image: confluentinc/cp-kafka:latest
#     depends_on:
#       - zookeeper
#     environment:
#       KAFKA_BROKER_ID: 1
#       KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
#       KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
#       KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
#     ports:
#       - "9093:9092"
#   api:
#     build:
#       context: .
#       dockerfile: Dockerfile.api
#     ports:
#       - "3000:3000"
#   workload:
#     build:
#       context: .
#       dockerfile: Dockerfile.workload
#     depends_on:
#       - api
#       - kafka


# week 2 -------------------------------------------------------------------------------

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    healthcheck:
      test: ["CMD", "echo", "ruok", "|", "nc", "localhost", "2181"]
      interval: 10s
      timeout: 5s
      retries: 20
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
    mem_limit: 256m
    mem_reservation: 128m

  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      zookeeper:
        condition: service_healthy
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    ports:
      - "9093:9092"
    volumes:
      - kafka_data:/var/lib/kafka/data
    healthcheck:
      test: ["CMD", "kafka-topics", "--list", "--bootstrap-server", "kafka:9092"]
      interval: 10s
      timeout: 5s
      retries: 20
    mem_limit: 512m
    mem_reservation: 256m

  api:
    build:
      context: .
      dockerfile: Dockerfile.api
    ports:
      - "3000:3000"
    volumes:
      - ./db.json:/app/db.json

  workload:
    build:
      context: .
      dockerfile: Dockerfile.workload
    depends_on:
      - api
      - kafka
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092

  consumer:
    build:
      context: .
      dockerfile: Dockerfile.consumer
    depends_on:
      kafka:
        condition: service_healthy
      loki:
        condition: service_started
      prometheus:
        condition: service_started
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - LOKI_URL=http://loki:3100
      - PROMETHEUS_PUSHGATEWAY_URL=http://pushgateway:9091

  loki:
    image: grafana/loki:latest
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - loki_data:/loki

  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus

  pushgateway:
    image: prom/pushgateway:latest
    ports:
      - "9091:9091"

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
    depends_on:
      - loki
      - prometheus

volumes:
  zookeeper_data:
  kafka_data:
  loki_data:
  prometheus_data:
  grafana_data: